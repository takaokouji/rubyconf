title: "RubyConf 2011 MacRuby on Rails 発表原稿"
author: "高尾宏治"
date: "2011/09/28"

= はじめに
Introduction

This is the manuscript for my presentation "MacRuby on Rails" for RubyConf2011.

On the day of the presentation,
I will generally speak as is written in this manuscript.

= MacRuby on Rails

(司会者がいない場合)
Now, I am about to start my presentation.

(司会者がいる場合)
Thank you for your kind introduction.

---

I would like welcome all of you.
It is a great honor for me to be here.

<<click>>

= Kouji Takao

Please let me introduce myself first. And let me introduce my company.

My name is Kouji Takao.
Both Kouji and Takao are commonly used as first names in Japan.
In my case, Kouji is my first name. And Takao is my last name.
Please call me Kouji.

<<click>>

= Work

I am a Research Engineer at Network Applied Communication Laboratory Ltd.
In Japan, my company is famous in connection with the Ruby programming language.

As for me, my work includes anything related to system integration.
For example,
system design, programming, planning and meeting with the customers.

And I work as the leader of small team.

<<click>>

= Spare Time

I develop open source software during my spare time.

I'm a MacRuby and cRuby committer.
In MacRuby, I am in charge of some of the core parts.
In cRuby, I am in charge of the Readline module.

<<click>>

= Contact Information

You can contact me on e-mail, twitter or facebook.

<<click>>

= My Company

As I said previously, my company's name is Network Applied Communication
Laboratory Ltd. 

<<click>>

My company is also known as NaCl.

<<click>>

As you probably know, NaCl means salt(ソォルト).
Salt(ソォルト) is necessary for all creatures to live.
This is why we named the company NaCl.

<<click>>

= My Company (part 2)

You can check out NaCl's homepage at www.netlab.jp.

<<click>>

NaCl is located in Shimane Prefecture in Japan.

<<click>>

The company was founded in 2001(two thousand and one).

<<click>>

So, 2011(two thousand and eleven) is the 10th(tenth) anniversary of the company.
As a matter of fact, it's also my own 10th(tenth) anniversary as an employee!
I'm very happy about that!!

<<click>>

57 people work at my company.

Wow, that's a lot of Rubyists!?
Just joking :)

<<click>>

Actually, about half of my co-workers work using Ruby.
However, 6 people are cRuby committers.

<<click>>

The company works with System Integration, Training and so on.

<<click>>

= The NaCl Way (part 1)

Please let me introduce The NaCl Way as I see it.

<<click>>

This is our president. His name is Hiroshi Inoue.

<<click>>

= The NaCl Way (part 2)

In a speech at my co-worker's wedding party, he said to my co-worker.

<<click>>

First, I want You to be happy.

<<click>>

Next, I want you to make Your Family happy.

<<click>>

Finally, if you have more happiness left, then please share it with Our Company :)

<<click>>

= The NaCl Way (part 3)

So I think the priorities of my company is as follows...

<<click>>

First, The Employee's well-being

<<click>>

Next, the well-being of the Employee's Family

<<click>>

And finally: The company itself

<<click>>

= The NaCl Way (part 3)

This is why I love my company!!

<<click>>

= MacRuby on Rails

Now, let's continue on to the main topic of today.

<<click>>

MacRuby on Rails

<<click>>

= MacRuby on Rails(part 2)

In my presentation,
I will explain how I modified MacRuby to make it a suitable foundation for running Rails.
I would also like to explain some of the technical intricacies that I discovered along the way.

<<click>>

<<click>>

= MacRuby

First, I would like to briefly explain about MacRuby.

<<click>>

= MacRuby (part 2)

MacRuby is a unique blend of Ruby 1.9 and Objective-C.

<<click>>

The goal of the MacRuby project is to be 100% compatible syntactically
and behaviorally with Ruby 1.9.

<<click>>

= Ruby 1.9

This is Ruby 1.9.

This system diagram shows the main building blocks of Ruby 1.9.
The top side shows the blocks facing the user,
and the bottom side shows the blocks facing the hardware.

<<click>>

At the top we have the applications made by the Ruby user.

<<click>>

Below that we have Ruby 1.9.
These are Ruby's main building blocks.

<<click>>

We have Ruby VM(ブィーエム), 
Ruby's Virtual Machine, 
which was previously called YARV(ヤーブィ).

<<click>>

We have the built-in garbage collection, which uses mark and sweep.

<<click>>

Then we have the Built-in Libraries, 
which includes the String class and the Array class and so on.

<<click>>

And then we have the Standard Library, 
which includes Readline, OpenSSL and other useful libraries.

<<click>>

Below Ruby, we have the system libraries.

<<click>>

And below the libraries, we have the Operating System.
Ruby 1.9 operates on a number of different platforms, 
among others Linux, Windows, Mac OS X and so on.

<<click>>

So, this is the structure of Ruby 1.9.

<<click>>

= MacRuby (part 3)

So let's try to compare this with the system diagram as it looks for MacRuby.
We'll look at each element in turn.

<<click>>

The application stays as it is.

<<click>>

Naturally, Ruby 1.9 becomes MacRuby.

<<click>>

Ruby VM(ヴィーエム) is replaced by LLVM(エルエルヴィーエム).

<<click>>

The built-in Garbage Collection is replaced by a mechanism provided by Mac OS X.
This Mac OS X feature is called AutoZone.
AutoZone is a Generational and Threaded Garbage Collection mechanism.

<<click>>

Part of the Built-in Library is replaced by a feature called Foundation
which is provided by Mac OS X.
Object, Array, String, Hash and others are replaced this way.
The result is that these classes get not only the functionality provided by Ruby,
but also the functionality provided by Foundation.

<<click>>

For instance, 
a Foundation method called "transform" is added to the Ruby String class.
This method can convert the alphabet version of my name "kouji"
into the corresponding japanese hiragana characters.

<<click>>

The Standard Libraries are more or less similar to Ruby 1.9.

<<click>>

The system libraries are also unchanged.

<<click>>

And the OS is of course Mac OS X.
Actually, MacRuby only runs on Mac OS X :P

<<click>>

= MacRuby (part 4)

So, if we look at the whole...
well, then it looks like this.

<<click>>

= Cocoa

On Mac OS X,
we have some libraries called Cocoa which are written in Objective-C.

The Cocoa includes more or less all the features of Mac OS X,
for instance a GUI toolkit, multimedia processing, text-to-speech and so on.

The majority of Mac OS X applications are developed using Cocoa.

<<click>>

= MacRuby x Cocoa

It is easy to use Cocoa in MacRuby.
Actually, we could say that MacRuby exists in order to allow us to use Cocoa.

<<click>>

= MacRuby x Cocoa

Well then, let's look at an example of how we can use Cocoa from MacRuby.

<<click>>

This is a sample program that plays a sound.

<<click>>

The purpose of the "framework" method is to load system libraries such as Cocoa.

<<click>>

This is the part where we are actually using Cocoa's functionality.
We specify a filename and we generate an instance of a sound file.
And then we call the "play" method to play back the sound.

<<click>>

So, now I am done with my introductory explanation of MacRuby.

<<click>>

= MacRuby on Rails

So, let's continue with the main topic, MacRuby *on Rails*.

So, I am going to talk about making Ruby on Rails works on MacRuby.

<<click>>

= Current Status

Let's see what we can currently do with MacRuby on Rails

<<click>>

Creating a new Rails project.

<<click>>

Generating a scaffold.

<<click>>

Starting up the server.

<<click>>

And ... showing the welcome page.

So, it is currently possible to run a Rails application on MacRuby
without modifying Rails.

However, it wasn't always like this.
Let's travel back in time!

<<click>>

= 7 months ago...

7(seven) months ago...

<<click>>

March 2011(two thousand and eleven) in Japan.

<<click>>

I thought, "Does Rails work on MacRuby?".

<<click>>

I tried to install Rails on MacRuby. And it worked.

<<click>>

= Perhaps...

So, I thought, "OK, it installed, but surely the Rails
generators won't work..."

<<click>>

I tried to create a Rails project.
And it actually worked!?

<<click>>

= Are you kidding me?

Not believing my own eyes, I tried to generate a scaffold...

<<click>>

Then it failed.

<<click>>

And starting up the server failed too.

After all Rails didn't work on MacRuby.

<<click>>

= My approach

So what did I do? My approach was to follow the five-step process
shown here iteratively.

<<click>>

First, I run Rails.

<<click>>

As the next step I see where it fails.
For instance, segmentation faults, aborted
programs and so on.

<<click>>

The third step is to research the cause of the failure.

<<click>>

The fourth step is to code a patch that fixes the problem.

<<click>>

And finally, I run RubySpec to verify my patch, 

<<click>>

and repeat from the top if necessary.

<<click>>

In order to do this, I needed to know about cRuby, Objective-C, C++
and LLVM.

When you just work with cRuby then you only need to know about cRuby.

But, when you want to code patches for MacRuby then you also need to
know about Objective-C, C++ and LLVM.

So, I think that to code patches for MacRuby is more difficult than
to do so for cRuby.

<<click>>

= A couple of examples of what I have fixed so far

Now, I would like to discuss a couple the issues that I fixed in MacRuby.

<<click>>

= #860 catch/throw

Let's have a look at the first case, which is ...

Trac Issue number 860(eight six zero),
an issue with catch and throw and exception handling in MacRuby.

<<click>>

This error can be reproduced by this code.

<<click>>

If you run this code, then the following error will occur.

This kind of exception handling is used by Bundler.
So, in order to make rails work,
we need to fix this error.

Let me try to explain the reason.

<<click>>

= Exception Handling

First,
we need to know a little bit about how exception handling is done in MacRuby.

<<click>>

Have a look at this code.
In this program we raise and rescue twice.

Let's look at what happens when we run this program on MacRuby.

<<click>>

On line two, we raise exception A.

<<click>>

On MacRuby, raised exceptions are stored in a stack.
We call this stack the Exception Stack.

<<click>>

<<click>>

On line 3, we rescue exception A and continue execution.

<<click>>

On line 5, inside the rescue block, we raise exception B.

<<click>>

So, exception B is pushed onto the stack.

<<click>>

On line 6, we rescue exception B and continue executing the code.

<<click>>

On line 7, we reach the end of the inner rescue block,
so MacRuby pops one exception of the stack.

<<click>>

And on line 8,
we reach the end of the outer rescue block,
and again we pop an exception from the Exception stack.

So, now we're done handling all the exceptions raised by this program.
And the Exception stack is empty.

This is the way that MacRuby stores and processes exceptions.

<<click>>

= Exception Handling and catch / throw

So let's look at
how exception handling is carried out when in combination with catch and throw.

<<click>>

Have a look at this code.

In this program,
we define a catch block labeled "foo".
Inside the catch block we have a begin-rescue where we raise an exception.
And in the rescue block we use "throw" to jump out ouf the begin-rescue.

Let's step through the execution again to see what happens in the MacRuby Exception stack,
just like we did in the last example.

<<click>>

On line 1, we define a labeled block using 'catch'.

After that, if we call 'throw' with symbol foo as an argument,
then we jump out of the block.

<<click>>

On line 3,
we raise exception A.
So, it is pushed onto the stack.

<<click>>

On line 4, we rescue exception A and continue execution.

<<click>>

On line 5, we call 'throw' with symbol foo as the argument.

<<click>>

So, we jump out of the labeled block.

<<click>>

Then, MacRuby pops exception A from the stack.

So this is how throw takes out exceptions from the stack in MacRuby.

<<click>>

= throw

Before I patched it, MacRuby's 'throw' was implemented as you can see here.

This code is from vm.cpp.

'throw' is implemented in C++.

<<click>>

The current_exception() function returns the topmost exception from the stack.

<<click>>

And, the pop_current_exception() function pops one exception off the stack.

<<click>>

= #860 catch/throw

Now, have a look at the code that reproduces the error once again.

<<click>>

On line 2,
we raise exception A.
So, exception A is pushed onto the stack.

<<click>>

On line 3, we rescue exception A and continue executing.

<<click>>

On line 4, we call 'catch' and 'throw'.

<<click>>

Then, MacRuby pops one exception of the stack.
And the stack is empty.

<<click>>

On line 5,
we reach the end of the outer rescue block,
and again we pop an exception off the stack.

However, the stack is empty.

<<click>>

Therefore, MacRuby aborts.

<<click>>

As you can probably see, 
that the cause of the error has poped one exception of the stack on line 4.

<<click>>

= How to fix

Let me explain how to fix the error.

First,
let's look at what happens when we run this program on MacRuby after we fixed the error.

<<click>>

Up until line 3, things work as they always did.

<<click>>

However, now things work a bit different from line 4.
Now, when we call 'catch',
then we store a record of what is at the top of the exception stack.
In this case, exception A.

<<click>>

Next, when we call 'throw', we compare the exception that we stored,
with the exception at the top of the exception stack.

If these two exceptions are the same, then MacRuby doesn't do anything.

If they are different, then MacRuby pops one exception off the stack.

Now, in this case,
they are the same, so MacRuby doesn't do anything.

<<click>>

On line 5, MacRuby pops an exception from the stack.
And then the stack is empty.

So this is how the new implementation of throw works.

<<click>>

= How to fix (part 2)

So,
I changed the implementation so that MacRuby only pops exceptions when needed.


<<click>>

So,
the code in the green frame is where we compare the stored exception with the exception at the top of the stack.

<<click>>

And in this part, MacRuby pops one exception off the stack.

So in short,
we keep popping exceptions off the stack until the while condition turns false,
or in other words until we reach the recorded exception.

<<click>>

= #860 Fixed

Finally,
let's look at what happens when we run a more complex program on MacRuby with the fixed implementation of throw.

<<click>>

On line 2,
we raise exception A.

So, exception A is pushed onto the stack.

On line 3, we rescue exception A and continue executing the code.

On line 4,
we call 'catch' and store exception A.

<<click>>

On line 6,
we raise exception B and push it onto the stack.

<<click>>

On line 7, we rescue exception B and continue execution.

On line 8, we call 'throw'.

Then we compare the recorded exception A with exception B of the stack.

<<click>>

These are different, so MacRuby pops exception B of the stack.

Then, we compare the recorded exception A with the new top of the stack,
which is now exception A.

These are same, so MacRuby doesn't do anything.

<<click>>

Then, we jump out of the labeled catch block.

<<click>>

On line 11,
MacRuby pops one exception of the stack,
and the program finishes without aborting.

So this is how I fixed the problem.

<<click>>

= #1192 Constant lookup

Next, let's look at another example of how I fixed MacRuby.
This time we'll look at Trac Issue number 1192 (one one nine two),
which is related to Constant Lookup in MacRuby.

The issue was that MacRuby failed 
to correctly look up constants in a number of situations
when you used module_eval and class_eval.

<<click>>

This error can be reproduced by this code.

<<click>>

If you run this code, then the following error will occur.

<<click>>

Please look at the line with Object .(dot) class_eval.

In cRuby, when we look for the constant B, 
we start looking within the green box.
So, we are able to find constant B.

<<click>>

However, in the MacRuby, at that time,
we only looked within class_eval's receiver object.
And since constant B isn't defined there,
the constant lookup would fail in MacRuby.

Constant Lookup within a class_eval or module_eval argument is widely used by ActiveSupport.

So, in order to make rails work,
we need to fix this error.

<<click>>

= Constant Lookup

To really understand this issue,
you must have a detailed understanding of how constant lookup works in cRuby.
I think that constant lookup is one of the parts of Ruby's language specification that are quite hard to understand.

And in most cases,
you can get along quite fine without knowing anything about this area.

<<click>>

Let's have a look at this code.
We'll look at it from the top and down.

<<click>>

On line 1, we begin the definition of module A.

<<click>>

And on line 2, we begin the definition of module B.

<<click>>

On line 3, we define a constant called CONST in module B.

<<click>>

On line 4,
we re-open the top-level module A.
in other words,
the module A that we defined in line 1.

<<click>>

And finally,
on line 5,
we print the contents of the constant CONST to the standard output.

<<click>>

In this example,
cRuby would look for the constant CONST within the green frame.

We call the scope represented by the green frame for "Lexical Scope"

And, cRuby would find the CONST that is defined in module B.

<<click>>

And here, for the sake of this presentation,
I am going to refer to the lookup of constants within Lexical Scope as "Lexical Constant Lookup".

<<click>>

= But...

At the time, MacRuby had not implemented Lexical Constant Lookup.

<<click>>

In this code on line 5,
MacRuby only looks for the constant CONST within module A.

<<click>>

Therefore, CONST cannot be found.

<<click>>

= Constant Lookup is complex

Next,
we have an example with class_eval in cRuby.

Constant lookup becomes even more complex when we use class_eval.

<<click>>

The behavior changes
depending on whether we pass a block or a string as the argument to class_eval.

In the code example on the left hand we pass a block.

And in the right hand example we pass a string.

Except for the different arguments, the two examples are identical.

<<click>>

= class_eval(&Block)

First,
I'll explain about calling class_eval with a block.
Let me explain this code sequentially from the top.

<<click>>

On line 1, we define module A.

<<click>>

On line 2, we define the constant CONST

<<click>>

On line 3, we define method f.

<<click>>

On line 4, we pass a block to class_eval.

<<click>>

On line 5, we print the content of CONST to the standard output.

<<click>>

On line 6, we close the class_eval block.

So, when we call method f, then line four to six will get executed.

<<click>>

On line 10, we define class K.

<<click>>

On line 11, we define another constant called CONST,
but this time inside class K.

<<click>>

As you can see on line 12, we extend class K with module A.

<<click>>

On line 13, we call module A's f method.
As a result, the code in line 4 to 6 is called.

So, can you tell from what scope the constant lookup starts in this case?

<<click>>

In this case it is easy to tell.

We look for the constant CONST within the green frame.

<<click>>

So in this case the 'p' outputs the string "A's CONST"ｄ

<<click>>

= class_eval(String)

Next,
let's look at performing class_eval with a string argument.

The code example only differs on line 4(four) to 6(six).

On line 4, we pass a string to class_eval in the form of a HERE document.

On line 5, we print the content of CONST.

On line 6, we close the HERE document.

Just as before, we call module A's f method on line 13.

So, can you tell from what scope the constant lookup starts in this case?

<<click>>

Actually, we would look for CONST within this green frame.


Let me explain the reason.

Whenever we call module A's f method,
we parse and evaluate the string that is passed to class_eval.

And,
the scope in which we look for CONST is determined to be the scope in which the method f is run.

Therefore, the lookup scope becomes the content of class K.

As you may know, we call this kind of scope for "Dynamic Scope".

<<click>>

So in this case the 'p' outputs the string "A's CONST"ｄ

<<click>>

= Constant Lookup is complex (part 2)

So lets look at the two cases together.

We can see that the scope of the constant lookup differs greatly depending on the kind of argument passed to class_eval.

<<click>>

= I somehow managed to fix this

It was not easy to fix this error.

I had to start over twice.
And I was finally able to find a satisfactory solution in the third attempt.

<<click>>

I edited more than 3000 lines of code.

When I finally managed to fix this error,
Laurent who is a main developer of MacRuby,
wrote the following to me,

<<click>>

it's official,
kouji is the hero of the day/week/month/...?
his patch seems to fix remaining lexical const lookup bugs :)

And that made me very happy!!

<<click>>

= A very complex bug

However after enjoying a brief victory,
I soon found a new and difficult issue related to constant lookup.

<<click>>

This error can be reproduced by this code.

Let me explain this code sequentially from the top.

<<click>>

On line one, we define module A.

<<click>>

On line two, we define constant B under module A.

<<click>>

On line five, we specify module A as receiver,
and call class_eval with a do-end block.

<<click>>

On line six, we are inside
the class_eval block, so the current receiver is module A.
Therefore, we this means that we are defining the class method f of module A.

<<click>>

On line seven, we output the constant B to the standard output.

<<click>>

And, on line eleven, we call method f of module A.
This means that we are going to have to look up constant B.

<<click>>

We are now using the patched MacRuby which implements Lexical scope.
This means that we are going to start looking for constant B within the green frame.

Naturally we fail to find B within the green frame.
So we want to continue our search for B.
This time we look in Object for constant B.
This also means that we are going to look for a constant called B that is defined at top level.

<<click>>

Here I would like to add a word of caution.

'class_eval' does not add it's own receiver(A) to the constant lookup scope.
And this behavior is part of Ruby's specification.

So, I expected that the search for constant B would fail.

<<click>>

= A very complex bug (part 2)

Surprisingly,
cRuby 1.9 found constant B in module A.
So it succeeded to find the constant B,
even though it should fail according to the Ruby specification.

<<click>>

On the other hand Ruby 1.8.7 worked as expected,
and failed to find the constant B.

MacRuby failed as well.

So, I asked Matz for advice about this issue.

<<click>>

He said this is a bug in cRuby 1.9.

And soon thereafter,
cRuby 1.9's behavior was fixed to match the behavior of Ruby 1.8.7.

<<click>>

= Demo

OK, it's time to show you the result of my work.

Making Rails works on MacRuby.

I will demonstrate Ruby on Rails running on MacRuby.
I am using Rails 3.0.7, which is a bit old.


(TABキーを押して、デモを開始)


<<click>>

= #1390 rb_vm_prepare_block

This looks all fine and good.
But unfortunately,
the server will abort if you click this link on the welcome page.

Hmm, there is still work to be done.

And making Rails work on MacRuby is more difficult than I expected,
perhaps even more difficult than implementing lexical constant lookup.

<<click>>

= The MacRuby train trip continues ...

So, The MacRuby train trip continues ...
Everyone, please get on board.

<<click>>

This is the URL for the MacRuby project's homepage.

<<click>>

This is MacRuby's official twitter account.

<<click>>

MacRuby is on GitHub.

<<click>>

This is the MacRuby Mailing List's address.

<<click>>

= Conclusion

So,
I would like to conclude this presentation with a quick summary of what I have said so far.

<<click>>

MacRuby is a unique blend of Ruby 1.9 and Objective-C.
The goal is to be 100% compatible with Ruby 1.9.

<<click>>

MacRuby on Rails
We're now able to show the default Rails welcome page.
But there is still a lot to do.

<<click>>

= Q & A

And now, I would like to answer any questions you have.

If you have a question, please ask me, but if possible please speak slowly.

<<click>>

= Acknowledgement

Last of all,

I would like to express my gratitude toward the RubyConf hosts and organizers
for giving me the opportunity to give this presentation.

<<click>>

And,
I would like to thank my co-worker Tor Yamamoto-Sorensen (@shakaijin) who helped me with this presentation.

<<click>>

And finally,
I would like to thank my everyone here,
for patiently listening to this presentation,
despite my limited English.

<<click>>

= Thank you

Thank you very much.

################################################################################
Local Variables:
mode: rd
End:
