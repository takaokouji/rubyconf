title: "RubyConf 2011 MacRuby on Rails 発表原稿"
author: "高尾宏治"
date: "2011/09/28"

= はじめに
Introduction

これはRubyConf2011で私が発表する「MacRuby on Rails」の原稿です。
This is the manuscript for my presentation "MacRuby on Rails" for RubyConf2011.

当日は基本的にこの資料に書いたとおりのことを話します。
On the day of the presentation I will generally speak as is written in this manuscript.

= MacRuby on Rails

(司会者がいない場合)
Now, I am about to start my presentation.

(司会者がいる場合)
Thank you for your kind introduction.

---

I would like welcome all of you.
It is a great honor for me to be here.

<<click>>

= Kouji Takao

Please let me introduce myself first. And let me introduce my company.

My name is Kouji Takao.
Both Kouji and Takao are commonly used as first names in Japan.
In my case, Kouji is my first name. And Takao is my last name.
Please call me Kouji.

<<click>>

= Work

I am a Research Engineer at Network Applied Communication Laboratory Ltd.
In Japan, my company is famous in connection with the Ruby programming language.

As for me, my work includes anything related to system integration.
For example,
system design, programming, planning and meeting with the customers.

And I work as the leader of small team.

<<click>>

= Spare Time

I develop open source software during my spare time.

I'm a MacRuby and cRuby committer.
In MacRuby, I am in charge of some of the Core parts.
In cRuby, I am in charge of the Readline module.

<<click>>

= Contact Information

You can contact me on e-mail, twitter or facebook.

<<click>>

= My Company

As I said previously, my company's name is Network Applied Communication
Laboratory Ltd. 

<<click>>

My company is also known as NaCl.

<<click>>

As you probably know, NaCl means salt(ソォルト).
Salt(ソォルト) is necessary for all creatures to live.
This is why we named the company NaCl.

<<click>>

= My Company (part 2)

You can check out NaCl's homepage at www.netlab.jp.

<<click>>

NaCl is located in Shimane Prefecture in Japan.

<<click>>

The company was founded in 2001(two thousand and one).

<<click>>

So, 2011(two thousand and eleven) is the 10th(tenth) anniversary of the company.
As a matter of fact, it's also my own 10th(tenth) anniversary as an employee!
I'm very happy about that!!

<<click>>

57 people work at my company.

Wow, that's a lot of Rubyists!?
Just joking :)

<<click>>

Actually, about half of my co-workers work using Ruby.
However, 6 people are cRuby committers.

<<click>>

The company works with System Integration, Training and so on.

<<click>>

= The NaCl Way (part 1)

Please let me introduce The NaCl Way as I see it.

<<click>>

This is our president. His name is Hiroshi Inoue.

<<click>>

= The NaCl Way (part 2)

In a speech at my co-worker's wedding party, he said to my co-worker.

<<click>>

First, I want You to be happy.

<<click>>

Next, I want you to make Your Family happy.

<<click>>

Finally, if you have more happiness left, then please share it with Our Company :)

<<click>>

= The NaCl Way (part 3)

So I think the priorities of my company is as follows...

<<click>>

First, The Employee's well-being

<<click>>

Next, the well-being of the Employee's Family

<<click>>

And finally: The company itself

<<click>>

= The NaCl Way (part 3)

This is why I love my company!!

<<click>>

= MacRuby on Rails

Now, let's continue on to the main topic of today.

<<click>>

MacRuby on Rails

<<click>>

= MacRuby on Rails(part 2)

In my presentation,
I will explain how I modified MacRuby to make it a suitable foundation for running Rails.
I would also like to explain some of the technical intricacies that I discovered along the way.

<<click>>

<<click>>

= MacRuby

First, I would like to briefly explain about MacRuby.

<<click>>

= MacRuby (part 2)

MacRuby is a unique blend of Ruby 1.9 and Objective-C.

<<click>>

The goal of the MacRuby project is to be 100% compatible syntactically
and behaviorally with Ruby 1.9.

<<click>>

= Ruby 1.9

This is Ruby 1.9.

This system diagram shows the main building blocks of Ruby 1.9.
The top side shows the blocks facing the user,
and the bottom side shows the blocks facing the hardware.

<<click>>

At the top we have the applications made by the Ruby user.

<<click>>

Below that we have Ruby 1.9.
These are Ruby's main building blocks.

<<click>>

We have Ruby VM(ブィーエム), 
Ruby's Virtual Machine, 
which was previously called YARV(ヤーブィ).

<<click>>

We have the built-in garbage collection, which uses mark and sweep.

<<click>>

Then we have the Built-in Libraries, 
which includes the String class and the Array class and so on.

<<click>>

And then we have the Standard Library, 
which includes Readline, OpenSSL and other useful libraries.

<<click>>

Below Ruby, we have the system libraries.

<<click>>

And below the libraries, we have the Operating System.
Ruby 1.9 operates on a number of different platforms, 
among others Linux, Windows, Mac OS X and so on.

<<click>>

So, this is the structure of Ruby 1.9.

<<click>>

= MacRuby (part 3)

So let's try to compare this with the system diagram as it looks for MacRuby.
We'll look at each element in turn.

<<click>>

The application stays as it is.

<<click>>

Naturally, Ruby 1.9 becomes MacRuby.

<<click>>

Ruby VM(ヴィーエム) is replaced by LLVM(エルエルヴィーエム).

<<click>>

The built-in Garbage Collection is replaced by a mechanism provided by Mac OS X.
This Mac OS X feature is called AutoZone.
AutoZone is a Generational and Threaded Garbage Collection mechanism.

<<click>>

Part of the Built-in Library is replaced by a feature called Foundation
which is provided by Mac OS X.
Object, Array, String, Hash and others are replaced this way.
The result is that these classes get not only the functionality provided by Ruby,
but also the functionality provided by Foundation.

<<click>>

For instance, 
a Foundation method called "transform" is added to the Ruby String class.
This method can convert the alphabet version of my name "kouji"
into the corresponding japanese hiragana characters.

<<click>>

The Standard Libraries are more or less similar to Ruby 1.9.

<<click>>

The system libraries are also unchanged.

<<click>>

And the OS is of course Mac OS X.
Actually, MacRuby only runs on Mac OS X :P

<<click>>

= MacRuby (part 4)

So, if we look at the whole...
well, then it looks like this.

<<click>>

= Cocoa

On Mac OS X,
we have some libraries called Cocoa which are written in Objective-C.

The Cocoa includes more or less all the features of Mac OS X,
for instance a GUI toolkit, multimedia processing, text-to-speech and so on.

The majority of Mac OS X applications are developed using Cocoa.

<<click>>

= MacRuby x Cocoa

It is easy to use Cocoa in MacRuby.
Actually, we could say that MacRuby exists in order to allow us to use Cocoa.

<<click>>

= MacRuby x Cocoa

Well then, let's look at an example of how we can use Cocoa from MacRuby.

<<click>>

This is a sample program that plays a sound.

<<click>>

The purpose of the "framework" method is to load system libraries such as Cocoa.

<<click>>

This is the part where we are actually using Cocoa's functionality.
We specify a filename and we generate an instance of a sound file.
And then we call the "play" method to play back the sound.

<<click>>

So, now I am done with my introductory explanation of MacRuby.

<<click>>

= MacRuby on Rails

So, let's continue with the main topic, MacRuby *on Rails*.

So, I am going to talk about making Ruby on Rails works on MacRuby.

<<click>>

= Current Status

Let's see what we can currently do with MacRuby on Rails

<<click>>

Creating a new Rails project.

<<click>>

Generating a scaffold.

<<click>>

Starting up the server.

<<click>>

And ... showing the welcome page.

So, it is currently possible to run a Rails application on MacRuby
without modifying Rails.

However, it wasn't always like this.
Let's travel back in time!

<<click>>

= 7 months ago...

7(seven) months ago...

<<click>>

March 2011(two thousand and eleven) in Japan.

<<click>>

I thought, "Does Rails work on MacRuby?".

<<click>>

I tried to install Rails on MacRuby. And it worked.

<<click>>

= Perhaps...

So, I thought, "OK, it installed, but surely the Rails
generators won't work..."

<<click>>

I tried to create a Rails project.
And it actually worked!?

<<click>>

= Are you kidding me?

Not believing my own eyes, I tried to generate a scaffold...

<<click>>

Then it failed.

<<click>>

And, to start up the server too.

After all Rails didn't work on MacRuby.

<<click>>

= My approach

So what did I do? My approach was to follow the five-step process
shown here iteratively.

<<click>>

First, I run Rails.

<<click>>

As the next step I see where it fails.
For instance, segmentation faults, abort
programs and so on.

<<click>>

The third step is to research the cause of the failure.

<<click>>

The fourth step is to code a patch that fixes the problem.

<<click>>

And finally, I run RubySpec to verify my patch, 

<<click>>

and repeat from the top if necessary.

<<click>>

In order to do this, I needed to know about cRuby, Objective-C, C++
and LLVM.

When you just work with cRuby then you only need to know about cRuby.

But, when you want to code patches for MacRuby then you also need to
know about Objective-C, C++ and LLVM.

So, I think that to code patches for MacRuby is more difficult than
to do so for cRuby.

<<click>>

= The Fixed Issues

Now, I would like to discuss a couple the issues that I fixed in MacRuby.

<<click>>

= #860 catch/throw

Let's have a look at the first case, which is ...

Trac Issue number 860(eight six zero),
an issue with catch and throw and exception handling in MacRuby.

<<click>>

This error can be reproduced by this code.

<<click>>

If you run this code, then the following error will occur.

Let me explain the reason.

<<click>>

= Exception

First, I want to explain how exception handling is done on MacRuby.

<<click>>

Have a look at this code.
In this program we raise and rescue twice.

Let's look at what happens when we run this program on MacRuby.

<<click>>

On line two, we raise exception A.

<<click>>

On MacRuby, raised exceptions are stored in a stack.
We call this stack the Exception Stack.

<<click>>

<<click>>

On line 3, we rescuing exception A and continue the execution.

<<click>>

On line 5, inside the rescue block, we raise the exception B.

<<click>>

So, exception B is pushed onto the stack.

<<click>>

On line 6, we rescue exception B and continue executing the code.

<<click>>

On line 7, we reach the end of the inner rescue block,
so MacRuby pops one exception of the stack.

<<click>>

And on line 8,
we reach the end of the outer rescue block,
and again we pop an exception off the Exception stack.

So, now we're done handling all the exceptions raised by this program.
And the Exception stack is empty.

This is the way that MacRuby stores and processes exceptions.

<<click>>

KOUJI_TODO: Presenter Noteは、ここまで記述した。

= Exception and catch / throw

次に、例外処理と catch / throw を組み合わせたときの実現方法を説明します
So let's look at how exeption handling is carried when we used in combination with catch and throw.

<<click>>

このコードを見てください。

このプログラムでは例外が発生したあとで、throwによってcatchまでジャンプ
しています。
TOR_TODO:bookmark

先ほどと同様に、Exception Stackの内容に着目しながら、このプログラムを
MacRubyで実行したときの様子を見てみましょう。

<<click>>

1行目で、:fooを指定してcatchを実行しています。
catchに指定したブロックの中で:fooを指定してthrowを実行すると、
catchのブロックを抜け出すことが出来ます。

<<click>>

3行目で、次の例外が発生します。それを例外スタックに追加します。

<<click>>

4行目で、その例外をrescueして、処理を続けています。

<<click>>

5行目で、:fooを指定してthrowを呼び出しています。

<<click>>

その結果、catchのブロックを抜け出します。

<<click>>

このとき、例外スタックから例外を1つ取り除きます。

このように、MacRubyでは、throwでも例外スタックから例外を取り除きます。

<<click>>

= throw

念のため、throwの実装を見てみましょう。
TOR_TODO: The MacRuby implementation at that time was like this.

throwの実装は ソースコードvm.cppの4321行付近にあります。
throwはC++で実装されています。

<<click>>

current_exception()関数は、例外スタックの一番上に積まれている例外を返します。

<<click>>

pop_current_exception()関数は、例外スタックから例外を一つ取り除きます。

<<click>>

このように実装されています。

<<click>>

= #860 catch/throw

それでは、もう一度、今回の問題の再現コードを見てみましょう。

先ほどと同様に、Exception Stackの内容に着目しながら、このプログラムを
MacRubyで実行したときの様子を見てみましょう。

<<click>>

2行目で、例外が発生します。
それを例外スタックに追加します。

<<click>>

3行目で、その例外をrescueして、処理を続けています。

<<click>>

4行目で、catch と throw を実行します。

<<click>>

throw の実行時に、例外スタックから例外を1つ取り除きます。
そして、例外スタックは空の状態になります。

<<click>>

5行目で、rescue節を含むendに到達したので例外スタックから例外を1つ取り除こうとします。
しかし、例外スタックは空になっています。

<<click>>

その結果、abort してしまうのです。

<<click>>

みなさんもお気付きのように、この問題の原因は 4 行目の throw で例外を取り除いてしまったことです。

TOR_TODO: Torさんに追加していただいた以下の記述をどこに使おうか迷っています。
Torさんと相談して決めたいと思います。
----- ここから -----
The issue does not occur, as long as you don't break this assumption.

With this exception handling structure, if we reach end, then it means that throw was NOT executed. On the other hand if throw is executed, then we break out of the begin rescue end block before we reach end.

In other words, this structure ensures that you never pop more than one exception from the stack.

しかし、Railsではこの前提が崩れてしまった。
However, this assumption does not hold true in Rails.

そのため動かなかった。
So, this caused an error when running Rails on MacRuby.
----- ここまで -----

<<click>>

= How to fix

この問題の修正内容を、修正後のコードの動作にそって説明します。

<<click>>

3行目までは、先ほどと同じように動作します。

<<click>>

4行目で、まず、catchを実行したときに、例外スタックの一番上に積まれている例外を記録しておきます。ここでは例外"A"を記録します。

<<click>>

次に、throwを実行したときに、catchで記録した例外と、例外スタックの一番上に積まれている例外を比較します。
それらが等しければ何もしません。
それらが違っていたら例外スタックから例外を取り除きます。
ここでは、どちらも例外"A"なので何もしません。

<<click>>

5行目で、例外スタックから例外を1つ取り除きます。
そして、例外スタックは空の状態になります。

<<click>>

= How to fix (part 2)

これをthrowに実装したのがこのコードです。

<<click>>

この部分で、catchで記録した例外と例外スタックの一番上に積まれている例外を比較しています。

<<click>>

この部分は修正前と同様に、例外スタックの一番上に積まれている例外を取り除いています。

<<click>>

<<click>>

= #860 Fixed

最後に、もう少し複雑なコードで修正後のMacRubyの動作を確認してみましょう。

<<click>>

2行目で、例外が発生します。
それを例外スタックに追加します。
3行目で、その例外をrescueして、処理を続けています。
4行目で、catchを実行します。このとき、例外"A"を記録します。

<<click>>

6行目で、例外が発生します。
それを例外スタックに追加します。

<<click>>

7行目で、その例外をrescueして、処理を続けています。

8行目で、throwを実行します。
このとき、catchで記録した例外"A"と例外スタックの一番上の例外"B"を比較します。

<<click>>

それぞれが異なるため、例外"B"を例外スタックから取り除きます。

もう一度、catchで記録した例外"A"と例外スタックの一番上の例外"A"を比較します。
それぞれが等しいため何もしません。

<<click>>

そして、catchのブロックを抜けます。

<<click>>

11行目で、例外スタックから例外を1つ取り除きます。

私は、このようにして、この問題を修正しました。

<<click>>

= #1192 Constant lookup

それでは次の修正を説明します。
Next, let's look at another example of how I fixed MacRuby, the 

Trac Issue number 1192 (one one nine two),
which is related to Constant Lookup in MacRuby.

これはmodule_evalやclass_evalをつかったような、いくつかのケースで定数の探索に
失敗してしまうという問題です。
The issue was that MacRuby failed 
to correctly look up constants in a number of situations
when you used module_eval and class_eval.

<<click>>

This error can be reproduced by this code.

<<click>>

If you run this code, then the following error will occur.

<<click>>

Object.class_eval { B } の行を見てください。
Please look at the line with Object dot class_eval.

定数Bを探すときcRubyでは、最初にこの枠の範囲を対象にします。
そして、定数Bを見つけます。

In cRuby, when we look for the constant B, 
we start looking within the green box.
So, we are able to find constant B.

<<click>>

しかし、MacRubyではclass_evalのレシーバであるObjectからしか探索しませんでした。
当然、Objectには定数Bは定義されていません。その結果、定数Bの探索に失敗します。
However, in the MacRuby, at that time,
we only looked within class_eval's receiver object.
And since constant B isn't defined there,
the constant lookup would fail in MacRuby.

<<click>>

= Constant Lookup

この問題を理解するには、Rubyにおける定数の探索のやり方を詳しく知る必要があります。そしてまた、それはRubyの言語仕様の中でもとても難しい問題の一つです。
To really understand this issue,
you must have a detailed understanding of how constant lookup works in Ruby.
And this is one of the parts of Ruby's language specification that quite hard to understand.

なお、定数探索の詳細を知っておかなくても多くの場合に困りません。
And in most cases,
you can get along quite fine without knowing the details of constant lookups in Ruby.

<<click>>

まずはこのコードを見てください。
Let's have a look at this code.

上から順番に説明します。
We'll look at it from the top and down.

<<click>>

1行目で、module Aを定義します。
In line 1, we begin the definition of module A.

<<click>>

2行目で、module Bを定義します。
And in line 2, we begin the definition of module B.

<<click>>

3行目で、module Bに定数CONSTを定義します。
In line 3, we define a constant called CONST in module B.

<<click>>

4行目で、トップレベルのmodule A、つまり1行目で定義したmodule Aを再定義します。
In line 4,
we re-open the top-level module A,
in other words,
the module A that we defined in line 1.

<<click>>

5行目で、定数CONSTを標準出力に出力します。
And finally,
in line 5,
we print the contents of the constant CONST to the standard output.

<<click>>

このとき、cRubyではこの枠の範囲から定数CONSTを探索します。
In this example,
cRuby would look for the constant CONST within the green frame.

この枠の範囲を Lexical Scope といいます。
We call the scope represented by the green frame for "Lexical Scope"

そして、module Bに定義された定数CONSTを見つけます。
And, cRuby would find the constant CONST that is defined in module B.

<<click>>

また、本プレゼンテーションでは Lexical Scope から定数を探索することを
Lexical Constant Lookupと呼びます。
And here, for the sake of this presentation,
I am going to refer to the lookup of constants within Lexical Scope as "Lexical Constant Lookup".

<<click>>

= But...

当時のMacRubyには、Lexical Constant Lookup が実装されていませんでした。
At the time, MacRuby had not implemented Lexical Constant Lookup.

<<click>>

このコードの場合だと、5行目では、module Aからしか定数CONSTを探索しませ
んでした。
In this code on line 5,
MacRuby only looks for the constant CONST within module A.

<<click>>

その結果、定数CONSTを見つけることができませんでした。
Therefore, CONST cannot be found.

<<click>>

= Constant Lookup is complex

次はclass_evalを使った例です。
Next,
we have an example with class_eval.

class_evalを使うと、定数探索はもっと複雑になります。
Constant lookup becomes even more complex when we use class_eval.

<<click>>

class_evalに文字列を渡すか、それともブロックを渡すかで結果が異なります。
The behavior changes
whether we pass a block or a string as the argument to class_eval.

左がブロックを渡しています。
In the code example on the left hand we pass a block.

右が文字列を渡しています。
And in the right hand example we pass a string.

それ以外の違いはありません。
Except for the different arguments, the two examples are identical.

<<click>>

= class_eval(&Block)

Blockを渡す場合について、上から順に説明します。
First, I'll explain about calling class_eval with a Block.
Let me explain this code sequentially from the top.

<<click>>

1行目で、module Aを定義します。
On line 1, we define module A.

<<click>>

2行目で、定数CONSTを定義します。
On line 2, we define the constant CONST

<<click>>

3行目で、メソッドfを定義します。
On line 3, we define method f.

<<click>>

4行目で、class_evalをブロックを渡して呼び出します。
On line 4, we pass the block to class_eval.

<<click>>

5行目で、定数CONSTを標準出力に出力します。
On line 5, we print the content of the constant CONST to the standard output.

<<click>>

6行目で、class_evalに渡すブロックの終端を指定します。
On line 6, we close the class_eval block.

実際には、4〜6行目はメソッドfを呼び出したときに実行されます。
So, when we call method f, then line four to six gets executed.

TOR_TODO: このような徹底的な動作の列強を毎回する必要はない気がします。要点だけに絞ったほうがいいかもしれないです。--Tor
-> 了解しました。どのようにするのがいいか、相談させてください。　-Kouji

<<click>>

少し飛ばします。
Let's jump a bit forward to line 10.

10行目で、class Kを定義します。
In line 10, we define class K.

<<click>>

11行目で、class Kに定数CONSTを定義します。
In line 11, we define another constant called CONST,
but this time inside class K.

<<click>>

12行目で、extend Aを実行します。
As you can see on line 12, we extend class K with module A.

<<click>>

13行目で、module Aのメソッドfを呼び出します。
On line 13, we call module A's f method.

その結果、4〜6行目が実行されます。
As a result, the code in line 4 to 6 is called.

このときの定数CONSTを最初に探索する範囲がわかりますか？

<<click>>

これは簡単ですね。

先ほどの説明と同様の理由から、この枠の範囲から最初に定数CONSTを探索します。

<<click>>

Therefore, 'p method' outputs the string "A's CONST".

<<click>>

= class_eval(String)

次に、文字列を渡す場合についてです。
Next, about performing class_eval with String.

先ほどのものとの違いは4〜6行目だけです。

4行目で、class_evalを文字列を渡して呼び出します。
5行目で、定数CONSTを標準出力に出力します。
6行目で、ヒアドキュメントの終端を指定します。
実際には、4〜6行目はメソッドfを呼び出したときに実行されます。

そして、先ほどと同様に、13行目で、module Aのメソッドfを呼び出します。

このときの定数CONSTを最初に探索する範囲がわかりますか？

<<click>>

実はこの枠の範囲です。

これは、メソッドfの実行時に、class_evalに渡された文字列をパーズして、そ
のときに定数の探索範囲を決定するからです。その結果、13行目の周辺が、定
数の探索範囲となります。

このような実行時にかわる範囲のことをdynamic scopeといいます。

<<click>>

Therefore, 'p method' outputs the string "K's CONST".

<<click>>

= Constant Lookup is complex (part 2)

最後にそれぞれを並べて見てみましょう。

class_evalに渡す引数が違うだけで、定数の探索範囲はこのように違ってきます。

<<click>>

= Manage somehow

このように複雑な定数探索の問題を修正するのは、簡単ではありませんでした。

2回のやり直しがあり、3回目でようやく満足な結果を得ることが出来ました。

<<click>>

ソースコードの修正は3000行以上になりました。

この修正が完了したとき、MacRubyのメイン開発者であるLaurentは、チャット
で私にこう書きました。

<<click>>

21 Apr 2011 15:24
Laurent S.
it's official, kouji is the hero of the day/week/month/...? his patch seems to fix remaining lexical const lookup bugs :)

私はとてもうれしかったです。

このような複雑な問題を含め、いくつか修正しました。

<<click>>

= A very complex bug

しかし、喜んでいたのもつかの間で、私は定数探索に関するとても難しいエラー
を見つけました。

I found a behavior that is complex to implement.

<<click>>

This error can be reproduced by this code.

Let me explain this code sequentially from the top.

<<click>>

1行目で、module Aを定義します。
In line number one, we define module A.

<<click>>

2行目で、module Aに定数Bを定義します。
In line number two, we define constant B under module A.

<<click>>

5行目で、Aをレシーバに指定してclass_evalを実行します。
In line number five, we specify module A as receiver, and perform
class_eval with block.

<<click>>

6行目で、class_evalのブロックの中であるためレシーバはクラスAです。
そのため、クラスメソッドfを定義します。
In line number six, we are inside
class_eval block, so current receiver is module A.
Therefore, we define class method f of module A. 

<<click>>

7行目で、定数Bを標準出力に出力します。
In line number seven, we output Constant B to standard output.

<<click>>

11行目で、Aのfを呼び出します。そして、定数Bを出力するために探索します。
In line number eleven, we perform method f of module A. Then we're
looking up constant B to output.

<<click>>

このとき、最初にこの枠の範囲から定数Bを探索します。そして、見つからない
ため、Object、つまりトップレベルから定数Bを探索します。

<<click>>

ここで注意が必要です。class_evalのレシーバは、定数の探索範囲に含みませ
ん。これはRubyの言語仕様です。

そして、両方とも見つからないため、定数Bの探索に失敗すると思ったの
ですが、

<<click>>

= A very complex bug (part 2)

なんと、Ruby 1.9 ではAからも探索していまい、定数Bを見つけてしまったのです。

<<click>>

でも、Ruby 1.8.7 は私の想像通り、定数Bの探索に失敗します。当然、
MacRuby もこのように動作します。

困った私は matz に相談しました。

<<click>>

その結果、これは Ruby 1.9 のバグだということになりました。
そして、あったいう間に 1.8.7 と同じ動作に修正されました。

<<click>>

= Demo

さぁ、それではみなさんに実際の成果をお見せするときがきました。

MacRuby で Rails を動作させます。
Rails works on MacRuby.

ここでは、Rails のバージョンは少し古いのですが 3.0.7 です。
At this time, I use Rails version 3.0.7 that is bit old.

(デモを開始)

<<click>>

= #1390 rb_vm_prepare_block

実は、Welcome Pageにある"About your application’s environment"リンクをクリックするとabortします。

Actually, MacRuby aborts if you click "About your application’s environment" link in Welcome page.

Rails を動かすのは定数探索よりも難しい問題ですね。
Hmm, working Rails on MacRuby is more difficult than to implement lexical constant lookup, isn't it?

<<click>>

= The MacRuby train trip continues ...

MacRuby による電車の旅はまだまだ続きます。
The MacRuby train trip continues ...

ぜひ、みなさんも一緒に旅をしましょう。
Everyone, please get on board.

<<click>>

This is the URL for the MacRuby project's homepage.

<<click>>

This is MacRuby's official twitter account.

<<click>>

MacRuby is on GitHub.

<<click>>

This is the MacRuby Mailing List's address.

<<click>>

= Conclusion

私のプレゼンテーションのまとめです。

<<click>>

MacRuby is a unique blend of Ruby 1.9 and Objective-C.
The goal is to be 100% compatible with Ruby 1.9.

<<click>>

MacRuby on Rails
We're now able to show the default Rails welcome page.
But there is still a lot to do.

<<click>>

= Q & A

それでは、何か質問はありますか？
And now, I would like to answer any questions you have.

質問される方は、できれば、ゆっくりとシンプルなものをお願いします。
If you have a question, please ask me, but if possible please speak slowly.

<<click>>

= Acknowledgement

最後に、
Last of all,

このプレゼンテーションの機会を与えてくださった RubyConf の運営者の方に
感謝いたします。
I would like to express my gratitude toward the RubyConf hosts and organizers
for giving me the opportunity to give this presentation.

<<click>>

私の少ない英語力を補ってくれた同僚の Tor に感謝いたします。
And, I would like to thank my co-worker Tor Yamamoto-Sorensen (@shakaijin) who helped me with this presentation.
TODO:

<<click>>

そして、私のつたない英語でのプレゼンテーションにつきあってくださった会
場のみなさまに感謝いたします。
And finally,
I would like to thank my everyone here,
for patiently listening to this presentation,
despite my clumsy English.

<<click>>

= Thank you

ありがとうござました。
Thank you very much.

<<click>>

################################################################################
Local Variables:
mode: rd
End:
